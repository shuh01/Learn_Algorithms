704. Binary Search

Related Topics: Array, Binary Search

Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.
 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1

First Attempt:

Code:

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        def binarySearch(temp, target):
            if nums[temp] == target:
                return temp
            elif nums[temp] < target:
                temp = int(temp+(len(nums)-temp)/2)
                return binarySearch(temp, target)
            elif nums[temp] > target:
                temp = int(temp / 2)
                return binarySearch(temp, target)

        
        temp = int(len(nums) / 2)
        binarySearch(temp, target)
        
 Feedback: I tried out this code without any basics of binarySearch and I got error saying 'None is not valid value for the expected return type integer'.
 Should figure out this error.
